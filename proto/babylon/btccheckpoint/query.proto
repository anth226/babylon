syntax = "proto3";
package babylon.btccheckpoint.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btccheckpoint/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/babylonchain/babylon/x/btccheckpoint/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/params";
  }
  // this line is used by starport scaffolding # 2


  // BtcCheckpointHeight returns earliest block height for given rawcheckpoint
  rpc BtcCheckpointHeight(QueryBtcCheckpointHeightRequest) returns (QueryBtcCheckpointHeightResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/{epoch_num}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// this line is used by starport scaffolding # 3

message QueryBtcCheckpointHeightRequest {
  // Number of epoch for which the earliest checkpointing btc height is requested
  uint64 epoch_num = 1;
}

// QueryCurrentEpochResponse is response type for the Query/CurrentEpoch RPC method
message QueryBtcCheckpointHeightResponse {
  // Earliest btc block number containing given raw checkpoint
  uint64 earliest_btc_block_number = 1;
}
