// Code generated by MockGen. DO NOT EDIT.
// Source: x/checkpointing/types/expected_keepers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/babylonchain/babylon/x/epoching/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types0.Context, addr types0.AccAddress) types1.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types1.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(ctx types0.Context, addr types0.AccAddress) types0.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", ctx, addr)
	ret0, _ := ret[0].(types0.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), ctx, addr)
}

// MockEpochingKeeper is a mock of EpochingKeeper interface.
type MockEpochingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEpochingKeeperMockRecorder
}

// MockEpochingKeeperMockRecorder is the mock recorder for MockEpochingKeeper.
type MockEpochingKeeperMockRecorder struct {
	mock *MockEpochingKeeper
}

// NewMockEpochingKeeper creates a new mock instance.
func NewMockEpochingKeeper(ctrl *gomock.Controller) *MockEpochingKeeper {
	mock := &MockEpochingKeeper{ctrl: ctrl}
	mock.recorder = &MockEpochingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochingKeeper) EXPECT() *MockEpochingKeeperMockRecorder {
	return m.recorder
}

// EnqueueMsg mocks base method.
func (m *MockEpochingKeeper) EnqueueMsg(ctx types0.Context, msg types.QueuedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueMsg", ctx, msg)
}

// EnqueueMsg indicates an expected call of EnqueueMsg.
func (mr *MockEpochingKeeperMockRecorder) EnqueueMsg(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueMsg", reflect.TypeOf((*MockEpochingKeeper)(nil).EnqueueMsg), ctx, msg)
}

// GetEpoch mocks base method.
func (m *MockEpochingKeeper) GetEpoch(ctx types0.Context) types.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch", ctx)
	ret0, _ := ret[0].(types.Epoch)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockEpochingKeeperMockRecorder) GetEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockEpochingKeeper)(nil).GetEpoch), ctx)
}

// GetTotalVotingPower mocks base method.
func (m *MockEpochingKeeper) GetTotalVotingPower(ctx types0.Context, epochNumber uint64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalVotingPower", ctx, epochNumber)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTotalVotingPower indicates an expected call of GetTotalVotingPower.
func (mr *MockEpochingKeeperMockRecorder) GetTotalVotingPower(ctx, epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotingPower", reflect.TypeOf((*MockEpochingKeeper)(nil).GetTotalVotingPower), ctx, epochNumber)
}

// GetValidatorSet mocks base method.
func (m *MockEpochingKeeper) GetValidatorSet(ctx types0.Context, epochNumer uint64) types.ValidatorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", ctx, epochNumer)
	ret0, _ := ret[0].(types.ValidatorSet)
	return ret0
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockEpochingKeeperMockRecorder) GetValidatorSet(ctx, epochNumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockEpochingKeeper)(nil).GetValidatorSet), ctx, epochNumer)
}

// MockCheckpointingHooks is a mock of CheckpointingHooks interface.
type MockCheckpointingHooks struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointingHooksMockRecorder
}

// MockCheckpointingHooksMockRecorder is the mock recorder for MockCheckpointingHooks.
type MockCheckpointingHooksMockRecorder struct {
	mock *MockCheckpointingHooks
}

// NewMockCheckpointingHooks creates a new mock instance.
func NewMockCheckpointingHooks(ctrl *gomock.Controller) *MockCheckpointingHooks {
	mock := &MockCheckpointingHooks{ctrl: ctrl}
	mock.recorder = &MockCheckpointingHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointingHooks) EXPECT() *MockCheckpointingHooksMockRecorder {
	return m.recorder
}

// AfterBlsKeyRegistered mocks base method.
func (m *MockCheckpointingHooks) AfterBlsKeyRegistered(ctx types0.Context, valAddr types0.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBlsKeyRegistered", ctx, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBlsKeyRegistered indicates an expected call of AfterBlsKeyRegistered.
func (mr *MockCheckpointingHooksMockRecorder) AfterBlsKeyRegistered(ctx, valAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBlsKeyRegistered", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterBlsKeyRegistered), ctx, valAddr)
}

// AfterRawCheckpointConfirmed mocks base method.
func (m *MockCheckpointingHooks) AfterRawCheckpointConfirmed(ctx types0.Context, epoch uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterRawCheckpointConfirmed", ctx, epoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterRawCheckpointConfirmed indicates an expected call of AfterRawCheckpointConfirmed.
func (mr *MockCheckpointingHooksMockRecorder) AfterRawCheckpointConfirmed(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRawCheckpointConfirmed", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterRawCheckpointConfirmed), ctx, epoch)
}
