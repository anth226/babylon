package keeper_test

import (
	"github.com/babylonchain/babylon/testutil/datagen"
	bbn "github.com/babylonchain/babylon/types"
	"github.com/cosmos/cosmos-sdk/types/query"
	"math/rand"
	"testing"

	testkeeper "github.com/babylonchain/babylon/testutil/keeper"
	"github.com/babylonchain/babylon/x/btclightclient/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/stretchr/testify/require"
)

func TestParamsQuery(t *testing.T) {
	keeper, ctx := testkeeper.BTCLightClientKeeper(t)
	wctx := sdk.WrapSDKContext(ctx)
	params := types.DefaultParams()
	keeper.SetParams(ctx, params)

	response, err := keeper.Params(wctx, &types.QueryParamsRequest{})
	require.NoError(t, err)
	require.Equal(t, &types.QueryParamsResponse{Params: params}, response)
}

func FuzzHashesQuery(f *testing.F) {
	/*
		 Checks:
		 1. If the request is nil, an error is returned
		 2. If the pagination key has not been set,
			`limit` number of hashes are returned and the pagination key
			 has been set to the next hash.
		 3. If the pagination key has been set,
			the `limit` number of hashes after the key are returned.
		 4. End of pagination: the last hashes are returned properly.
		 5. If the pagination key is not a valid hash, an error is returned.

		 Data Generation:
		 - Generate a random tree of headers and insert their hashes
		   into the hashToHeight storage.
		 - Generate a random `limit` to the query as an integer between 1 and the
		   total number of hashes.
		   Do checks 2-4 by initially querying without a key and then querying
		   with the nextKey attribute.
	*/
	datagen.AddRandomSeedsToFuzzer(f, 100)
	f.Fuzz(func(t *testing.T, seed int64) {
		rand.Seed(seed)
		blcKeeper, ctx := testkeeper.BTCLightClientKeeper(t)
		sdkCtx := sdk.WrapSDKContext(ctx)

		// Test nil request
		resp, err := blcKeeper.Hashes(sdkCtx, nil)
		if resp != nil {
			t.Errorf("Nil input led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Nil input led to a nil error")
		}

		// Test pagination key being invalid
		// We want the key to have a positive length
		bzSz := datagen.RandomIntOtherThan(bbn.BTCHeaderHashLen-1, bbn.BTCHeaderHashLen*10) + 1
		key := datagen.GenRandomByteArray(bzSz)
		pagination := constructRequestWithKey(key)
		hashesRequest := types.NewQueryHashesRequest(pagination)
		resp, err = blcKeeper.Hashes(sdkCtx, hashesRequest)
		if resp != nil {
			t.Errorf("Invalid key led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Invalid key led to a nil error")
		}

		// Generate a random tree of headers
		tree := genRandomTree(blcKeeper, ctx, 1, 10)
		// Get the headers map
		headersMap := tree.GetHeadersMap()
		// Generate a random limit
		treeSize := uint64(tree.Size())
		limit := uint64(rand.Int63n(int64(tree.Size())) + 1)
		// Generate a page request with a limit and a nil key
		pagination = constructRequestWithLimit(limit)
		// Generate the initial query
		hashesRequest = types.NewQueryHashesRequest(pagination)
		// Construct a mapping from the hashes found to a boolean value
		// Will be used later to evaluate whether all the hashes were returned
		hashesFound := make(map[string]bool, 0)

		for headersRetrieved := uint64(0); headersRetrieved < treeSize; headersRetrieved += limit {
			resp, err = blcKeeper.Hashes(sdkCtx, hashesRequest)
			if err != nil {
				t.Errorf("Valid request led to an error %s", err)
			}
			if resp == nil {
				t.Fatalf("Valid request led to a nil response")
			}
			// If we are on the last page the elements retrieved should be equal to the remaining ones
			if headersRetrieved+limit >= treeSize && uint64(len(resp.Hashes)) != treeSize-headersRetrieved {
				t.Fatalf("On the last page expected %d elements but got %d", treeSize-headersRetrieved, len(resp.Hashes))
			}
			// Otherwise, the elements retrieved should be equal to the limit
			if headersRetrieved+limit < treeSize && uint64(len(resp.Hashes)) != limit {
				t.Fatalf("On an intermediate page expected %d elements but got %d", limit, len(resp.Hashes))
			}

			for _, hash := range resp.Hashes {
				// Check if the hash was generated by the tree
				if _, ok := headersMap[hash.String()]; !ok {
					t.Fatalf("Hashes returned a hash that was not created")
				}
				hashesFound[hash.String()] = true
			}

			// Construct the next page request
			pagination = constructRequestWithKeyAndLimit(resp.Pagination.NextKey, limit)
			hashesRequest = types.NewQueryHashesRequest(pagination)
		}

		if len(hashesFound) != len(headersMap) {
			t.Errorf("Some hashes were missed. Got %d while %d were expected", len(hashesFound), len(headersMap))
		}
	})
}

func FuzzContainsQuery(f *testing.F) {
	/*
		Checks:
		1. If the request is nil, (nil, error) is returned
		2. The query returns true or false depending on whether the hash exists.

		Data generation:
		- Generate a random tree of headers and insert into storage.
		- Generate a random header but do not insert it into storage.
	*/
	datagen.AddRandomSeedsToFuzzer(f, 100)
	f.Fuzz(func(t *testing.T, seed int64) {
		rand.Seed(seed)
		blcKeeper, ctx := testkeeper.BTCLightClientKeeper(t)
		sdkCtx := sdk.WrapSDKContext(ctx)

		// Test nil input
		resp, err := blcKeeper.Contains(sdkCtx, nil)
		if resp != nil {
			t.Errorf("Nil input led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Nil input led to a nil error")
		}

		// Generate a random tree of headers and insert it into storage
		tree := genRandomTree(blcKeeper, ctx, 1, 10)

		// Test with a non-existent header
		query, _ := types.NewQueryContainsRequest(datagen.GenRandomBTCHeaderInfo().Hash.MarshalHex())
		resp, err = blcKeeper.Contains(sdkCtx, query)
		if err != nil {
			t.Errorf("Valid input let to an error: %s", err)
		}
		if resp == nil {
			t.Errorf("Valid input led to nil response")
		}
		if resp.Contains {
			t.Errorf("Non existent header hash led to true result")
		}

		// Test with an existing header
		query, _ = types.NewQueryContainsRequest(tree.RandomNode().Hash.MarshalHex())
		resp, err = blcKeeper.Contains(sdkCtx, query)
		if err != nil {
			t.Errorf("Valid input let to an error: %s", err)
		}
		if resp == nil {
			t.Errorf("Valid input led to nil response")
		}
		if !resp.Contains {
			t.Errorf("Existent header hash led to false result")
		}
	})
}

func FuzzMainChainQuery(f *testing.F) {
	/*
			 Checks:
			 1. If the request is nil, an error is returned
			 2. If the pagination key is not a valid hash, an error is returned.
		     3. If the pagination key does not correspond to an existing header, an error is returned.
			 4. If the pagination key is not on the main chain, an error is returned.
			 5. If the pagination key has not been set,
				the first `limit` items of the main chain are returned
			 6. If the pagination key has been set, the `limit` items after it are returned.
			 7. End of pagination: the last elements are returned properly and the next_key is set to nil.

			 Data Generation:
			 - Generate a random tree of headers with different PoW and insert them into the headers storage.
			 - Calculate the main chain using the `HeadersState().MainChain()` function (here we only test the query)
	*/
	datagen.AddRandomSeedsToFuzzer(f, 100)
	f.Fuzz(func(t *testing.T, seed int64) {
		rand.Seed(seed)
		blcKeeper, ctx := testkeeper.BTCLightClientKeeper(t)
		sdkCtx := sdk.WrapSDKContext(ctx)

		// Test nil input
		resp, err := blcKeeper.MainChain(sdkCtx, nil)
		if resp != nil {
			t.Errorf("Nil input led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Nil input led to a nil error")
		}

		// Test pagination key being invalid
		// We want the key to have a positive length
		bzSz := datagen.RandomIntOtherThan(bbn.BTCHeaderHashLen-1, bbn.BTCHeaderHashLen*10) + 1
		key := datagen.GenRandomByteArray(bzSz)
		pagination := constructRequestWithKey(key)
		mainchainRequest := types.NewQueryMainChainRequest(pagination)
		resp, err = blcKeeper.MainChain(sdkCtx, mainchainRequest)
		if resp != nil {
			t.Errorf("Invalid key led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Invalid key led to a nil error")
		}

		// Generate a random tree of headers and insert it into storage
		tree := genRandomTree(blcKeeper, ctx, 1, 10)

		// Check whether the key being set to an element that does not exist leads to an error
		pagination = constructRequestWithKey(datagen.GenRandomBTCHeaderInfo().Hash.MustMarshal())
		mainchainRequest = types.NewQueryMainChainRequest(pagination)
		resp, err = blcKeeper.MainChain(sdkCtx, mainchainRequest)
		if resp != nil {
			t.Errorf("Key corresponding to header that does not exist led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Key corresponding to a header that does not exist led to a nil error")
		}

		// Get the mainchain
		mainchain := tree.GetMainChain()

		// Check whether the key being set to a non-mainchain element leads to an error
		// Select a random header
		header := tree.RandomNode()
		// Get the tip
		tip := tree.GetTip()
		// if the header is not on the mainchain, we can test our assumption
		// if it is, randomness will ensure that it does on another test case
		if !tree.IsOnNodeChain(tip, header) {
			pagination = constructRequestWithKeyAndLimit(header.Hash.MustMarshal(), uint64(len(mainchain)))
			mainchainRequest = types.NewQueryMainChainRequest(pagination)
			resp, err = blcKeeper.MainChain(sdkCtx, mainchainRequest)
			if resp != nil {
				t.Errorf("Key corresponding to header that is not on the mainchain led to a non-nil response")
			}
			if err == nil {
				t.Errorf("Key corresponding to a header that is not on the mainchain led to a nil error")
			}
		}

		// Index into the current element of mainchain that we are iterating
		mcIdx := 0
		// Generate a random limit
		mcSize := uint64(len(mainchain))
		limit := uint64(rand.Int63n(int64(len(mainchain))) + 1)

		// 50% of the time, do a reverse request
		// Generate a page request with a limit and a nil key
		pagination = constructRequestWithLimit(limit)
		reverse := false
		if datagen.OneInN(2) {
			reverse = true
			pagination.Reverse = true
		}
		// Generate the initial query
		mainchainRequest = types.NewQueryMainChainRequest(pagination)
		for headersRetrieved := uint64(0); headersRetrieved < mcSize; headersRetrieved += limit {
			resp, err = blcKeeper.MainChain(sdkCtx, mainchainRequest)
			if err != nil {
				t.Errorf("Valid request led to an error %s", err)
			}
			if resp == nil {
				t.Fatalf("Valid request led to nil response")
			}
			// If we are on the last page the elements retrieved should be equal to the remaining ones
			if headersRetrieved+limit >= mcSize && uint64(len(resp.Headers)) != mcSize-headersRetrieved {
				t.Fatalf("On the last page expected %d elements but got %d", mcSize-headersRetrieved, len(resp.Headers))
			}
			// Otherwise, the elements retrieved should be equal to the limit
			if headersRetrieved+limit < mcSize && uint64(len(resp.Headers)) != limit {
				t.Fatalf("On an intermediate page expected %d elements but got %d", limit, len(resp.Headers))
			}

			// Iterate through the headers and ensure that they correspond
			// to the current index into the mainchain.
			for i := 0; i < len(resp.Headers); i++ {
				idx := mcIdx
				if reverse {
					idx = len(mainchain) - mcIdx - 1
				}
				if !resp.Headers[i].Eq(mainchain[idx]) {
					t.Errorf("%t", reverse)
					t.Errorf("Response does not match mainchain. Expected %s got %s", mainchain[idx].Hash, resp.Headers[i].Hash)
				}
				mcIdx += 1
			}

			// Construct the next page request
			pagination = constructRequestWithKeyAndLimit(resp.Pagination.NextKey, limit)
			if reverse {
				pagination.Reverse = true
			}
			mainchainRequest = types.NewQueryMainChainRequest(pagination)
		}
	})
}

func FuzzTipQuery(f *testing.F) {
	/*
		Checks:
		1. If the request is nil, (nil, error) is returned
		2. The query returns the tip BTC header

		Data generation:
		- Generate a random tree of headers and insert into storage
	*/
	datagen.AddRandomSeedsToFuzzer(f, 100)
	f.Fuzz(func(t *testing.T, seed int64) {
		rand.Seed(seed)
		blcKeeper, ctx := testkeeper.BTCLightClientKeeper(t)
		sdkCtx := sdk.WrapSDKContext(ctx)

		// Test nil input
		resp, err := blcKeeper.Tip(sdkCtx, nil)
		if resp != nil {
			t.Errorf("Nil input led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Nil input led to a nil error")
		}

		tree := genRandomTree(blcKeeper, ctx, 1, 10)

		query := types.NewQueryTipRequest()
		resp, err = blcKeeper.Tip(sdkCtx, query)
		if err != nil {
			t.Errorf("valid input led to an error: %s", err)
		}
		if resp == nil {
			t.Errorf("Valid input led to nil response")
		}
		if !resp.Header.Eq(tree.GetTip()) {
			t.Errorf("Invalid header returned. Expected %s, got %s", tree.GetTip().Hash, resp.Header.Hash)
		}
	})
}

func FuzzBaseHeaderQuery(f *testing.F) {
	/*
		Checks:
		1. If the request is nil, (nil, error) is returned
		2. The query returns the base BTC header

		Data generation:
		- Generate a random tree of headers and insert into storage.
	*/
	datagen.AddRandomSeedsToFuzzer(f, 100)
	f.Fuzz(func(t *testing.T, seed int64) {
		rand.Seed(seed)
		blcKeeper, ctx := testkeeper.BTCLightClientKeeper(t)
		sdkCtx := sdk.WrapSDKContext(ctx)

		// Test nil input
		resp, err := blcKeeper.BaseHeader(sdkCtx, nil)
		if resp != nil {
			t.Errorf("Nil input led to a non-nil response")
		}
		if err == nil {
			t.Errorf("Nil input led to a nil error")
		}

		tree := genRandomTree(blcKeeper, ctx, 1, 10)

		query := types.NewQueryBaseHeaderRequest()
		resp, err = blcKeeper.BaseHeader(sdkCtx, query)
		if err != nil {
			t.Errorf("valid input led to an error: %s", err)
		}
		if resp == nil {
			t.Errorf("Valid input led to nil response")
		}
		if !resp.Header.Eq(tree.GetRoot()) {
			t.Errorf("Invalid header returned. Expected %s, got %s", tree.GetRoot().Hash, resp.Header.Hash)
		}
	})
}

// Constructors for PageRequest objects
func constructRequestWithKeyAndLimit(key []byte, limit uint64) *query.PageRequest {
	// If limit is 0, set one randomly
	if limit == 0 {
		limit = uint64(rand.Int63() + 1) // Use Int63 instead of Uint64 to avoid overflows
	}
	return &query.PageRequest{
		Key:        key,
		Offset:     0, // only offset or key is set
		Limit:      limit,
		CountTotal: false, // only used when offset is used
		Reverse:    false,
	}
}

func constructRequestWithLimit(limit uint64) *query.PageRequest {
	return constructRequestWithKeyAndLimit(nil, limit)
}

func constructRequestWithKey(key []byte) *query.PageRequest {
	return constructRequestWithKeyAndLimit(key, 0)
}
