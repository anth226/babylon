// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/epoching/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_abci_types "github.com/tendermint/tendermint/abci/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventBeginEpoch struct {
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *EventBeginEpoch) Reset()         { *m = EventBeginEpoch{} }
func (m *EventBeginEpoch) String() string { return proto.CompactTextString(m) }
func (*EventBeginEpoch) ProtoMessage()    {}
func (*EventBeginEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{0}
}
func (m *EventBeginEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBeginEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBeginEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBeginEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBeginEpoch.Merge(m, src)
}
func (m *EventBeginEpoch) XXX_Size() int {
	return m.Size()
}
func (m *EventBeginEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBeginEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_EventBeginEpoch proto.InternalMessageInfo

func (m *EventBeginEpoch) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

type EventEndEpoch struct {
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *EventEndEpoch) Reset()         { *m = EventEndEpoch{} }
func (m *EventEndEpoch) String() string { return proto.CompactTextString(m) }
func (*EventEndEpoch) ProtoMessage()    {}
func (*EventEndEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{1}
}
func (m *EventEndEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEndEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEndEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEndEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEndEpoch.Merge(m, src)
}
func (m *EventEndEpoch) XXX_Size() int {
	return m.Size()
}
func (m *EventEndEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEndEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_EventEndEpoch proto.InternalMessageInfo

func (m *EventEndEpoch) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

type EventHandleQueuedMsg struct {
	OriginalEventType  string                                                       `protobuf:"bytes,1,opt,name=original_event_type,json=originalEventType,proto3" json:"original_event_type,omitempty"`
	EpochNumber        uint64                                                       `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	TxId               []byte                                                       `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	MsgId              []byte                                                       `protobuf:"bytes,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	OriginalAttributes []github_com_tendermint_tendermint_abci_types.EventAttribute `protobuf:"bytes,5,rep,name=original_attributes,json=originalAttributes,proto3,customtype=github.com/tendermint/tendermint/abci/types.EventAttribute" json:"original_attributes,omitempty"`
	Error              string                                                       `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventHandleQueuedMsg) Reset()         { *m = EventHandleQueuedMsg{} }
func (m *EventHandleQueuedMsg) String() string { return proto.CompactTextString(m) }
func (*EventHandleQueuedMsg) ProtoMessage()    {}
func (*EventHandleQueuedMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{2}
}
func (m *EventHandleQueuedMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventHandleQueuedMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventHandleQueuedMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventHandleQueuedMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventHandleQueuedMsg.Merge(m, src)
}
func (m *EventHandleQueuedMsg) XXX_Size() int {
	return m.Size()
}
func (m *EventHandleQueuedMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EventHandleQueuedMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EventHandleQueuedMsg proto.InternalMessageInfo

func (m *EventHandleQueuedMsg) GetOriginalEventType() string {
	if m != nil {
		return m.OriginalEventType
	}
	return ""
}

func (m *EventHandleQueuedMsg) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EventHandleQueuedMsg) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *EventHandleQueuedMsg) GetMsgId() []byte {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *EventHandleQueuedMsg) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EventSlashThreshold struct {
	SlashedVotingPower int64    `protobuf:"varint,1,opt,name=slashed_voting_power,json=slashedVotingPower,proto3" json:"slashed_voting_power,omitempty"`
	TotalVotingPower   int64    `protobuf:"varint,2,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	SlashedValidators  [][]byte `protobuf:"bytes,3,rep,name=slashed_validators,json=slashedValidators,proto3" json:"slashed_validators,omitempty"`
}

func (m *EventSlashThreshold) Reset()         { *m = EventSlashThreshold{} }
func (m *EventSlashThreshold) String() string { return proto.CompactTextString(m) }
func (*EventSlashThreshold) ProtoMessage()    {}
func (*EventSlashThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{3}
}
func (m *EventSlashThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSlashThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSlashThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSlashThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSlashThreshold.Merge(m, src)
}
func (m *EventSlashThreshold) XXX_Size() int {
	return m.Size()
}
func (m *EventSlashThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSlashThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_EventSlashThreshold proto.InternalMessageInfo

func (m *EventSlashThreshold) GetSlashedVotingPower() int64 {
	if m != nil {
		return m.SlashedVotingPower
	}
	return 0
}

func (m *EventSlashThreshold) GetTotalVotingPower() int64 {
	if m != nil {
		return m.TotalVotingPower
	}
	return 0
}

func (m *EventSlashThreshold) GetSlashedValidators() [][]byte {
	if m != nil {
		return m.SlashedValidators
	}
	return nil
}

type EventWrappedDelegate struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom            string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	EpochBoundary    uint64 `protobuf:"varint,4,opt,name=epoch_boundary,json=epochBoundary,proto3" json:"epoch_boundary,omitempty"`
}

func (m *EventWrappedDelegate) Reset()         { *m = EventWrappedDelegate{} }
func (m *EventWrappedDelegate) String() string { return proto.CompactTextString(m) }
func (*EventWrappedDelegate) ProtoMessage()    {}
func (*EventWrappedDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{4}
}
func (m *EventWrappedDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWrappedDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWrappedDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWrappedDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWrappedDelegate.Merge(m, src)
}
func (m *EventWrappedDelegate) XXX_Size() int {
	return m.Size()
}
func (m *EventWrappedDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWrappedDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_EventWrappedDelegate proto.InternalMessageInfo

func (m *EventWrappedDelegate) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *EventWrappedDelegate) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EventWrappedDelegate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventWrappedDelegate) GetEpochBoundary() uint64 {
	if m != nil {
		return m.EpochBoundary
	}
	return 0
}

type EventWrappedUndelegate struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom            string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	EpochBoundary    uint64 `protobuf:"varint,4,opt,name=epoch_boundary,json=epochBoundary,proto3" json:"epoch_boundary,omitempty"`
}

func (m *EventWrappedUndelegate) Reset()         { *m = EventWrappedUndelegate{} }
func (m *EventWrappedUndelegate) String() string { return proto.CompactTextString(m) }
func (*EventWrappedUndelegate) ProtoMessage()    {}
func (*EventWrappedUndelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{5}
}
func (m *EventWrappedUndelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWrappedUndelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWrappedUndelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWrappedUndelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWrappedUndelegate.Merge(m, src)
}
func (m *EventWrappedUndelegate) XXX_Size() int {
	return m.Size()
}
func (m *EventWrappedUndelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWrappedUndelegate.DiscardUnknown(m)
}

var xxx_messageInfo_EventWrappedUndelegate proto.InternalMessageInfo

func (m *EventWrappedUndelegate) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *EventWrappedUndelegate) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EventWrappedUndelegate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventWrappedUndelegate) GetEpochBoundary() uint64 {
	if m != nil {
		return m.EpochBoundary
	}
	return 0
}

type EventWrappedBeginRedelegate struct {
	SourceValidatorAddress      string `protobuf:"bytes,1,opt,name=source_validator_address,json=sourceValidatorAddress,proto3" json:"source_validator_address,omitempty"`
	DestinationValidatorAddress string `protobuf:"bytes,2,opt,name=destination_validator_address,json=destinationValidatorAddress,proto3" json:"destination_validator_address,omitempty"`
	Amount                      uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom                       string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	EpochBoundary               uint64 `protobuf:"varint,5,opt,name=epoch_boundary,json=epochBoundary,proto3" json:"epoch_boundary,omitempty"`
}

func (m *EventWrappedBeginRedelegate) Reset()         { *m = EventWrappedBeginRedelegate{} }
func (m *EventWrappedBeginRedelegate) String() string { return proto.CompactTextString(m) }
func (*EventWrappedBeginRedelegate) ProtoMessage()    {}
func (*EventWrappedBeginRedelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f0a2c43c7aaeb43, []int{6}
}
func (m *EventWrappedBeginRedelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWrappedBeginRedelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWrappedBeginRedelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWrappedBeginRedelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWrappedBeginRedelegate.Merge(m, src)
}
func (m *EventWrappedBeginRedelegate) XXX_Size() int {
	return m.Size()
}
func (m *EventWrappedBeginRedelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWrappedBeginRedelegate.DiscardUnknown(m)
}

var xxx_messageInfo_EventWrappedBeginRedelegate proto.InternalMessageInfo

func (m *EventWrappedBeginRedelegate) GetSourceValidatorAddress() string {
	if m != nil {
		return m.SourceValidatorAddress
	}
	return ""
}

func (m *EventWrappedBeginRedelegate) GetDestinationValidatorAddress() string {
	if m != nil {
		return m.DestinationValidatorAddress
	}
	return ""
}

func (m *EventWrappedBeginRedelegate) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EventWrappedBeginRedelegate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventWrappedBeginRedelegate) GetEpochBoundary() uint64 {
	if m != nil {
		return m.EpochBoundary
	}
	return 0
}

func init() {
	proto.RegisterType((*EventBeginEpoch)(nil), "babylon.epoching.v1.EventBeginEpoch")
	proto.RegisterType((*EventEndEpoch)(nil), "babylon.epoching.v1.EventEndEpoch")
	proto.RegisterType((*EventHandleQueuedMsg)(nil), "babylon.epoching.v1.EventHandleQueuedMsg")
	proto.RegisterType((*EventSlashThreshold)(nil), "babylon.epoching.v1.EventSlashThreshold")
	proto.RegisterType((*EventWrappedDelegate)(nil), "babylon.epoching.v1.EventWrappedDelegate")
	proto.RegisterType((*EventWrappedUndelegate)(nil), "babylon.epoching.v1.EventWrappedUndelegate")
	proto.RegisterType((*EventWrappedBeginRedelegate)(nil), "babylon.epoching.v1.EventWrappedBeginRedelegate")
}

func init() { proto.RegisterFile("babylon/epoching/v1/events.proto", fileDescriptor_2f0a2c43c7aaeb43) }

var fileDescriptor_2f0a2c43c7aaeb43 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0x6f, 0xf6, 0x1f, 0x74, 0x6c, 0xb5, 0x9d, 0x5d, 0xcb, 0x62, 0x31, 0xae, 0x0b, 0x42, 0x41,
	0x4d, 0x5a, 0xf5, 0x20, 0x1e, 0x84, 0x2e, 0x16, 0xac, 0xa0, 0x68, 0xac, 0x15, 0xbc, 0x84, 0xc9,
	0xce, 0x23, 0x19, 0x48, 0x66, 0xc2, 0xcc, 0x64, 0xed, 0x7e, 0x0b, 0x8f, 0x22, 0x1e, 0xfd, 0x30,
	0x1e, 0x7b, 0x14, 0x0f, 0x22, 0xed, 0x17, 0xf0, 0x23, 0x48, 0x26, 0x7f, 0x8c, 0x76, 0x2b, 0x1e,
	0xbd, 0xe5, 0xfd, 0xfe, 0xbc, 0xf9, 0xbd, 0x3c, 0x66, 0xd0, 0x28, 0x20, 0xc1, 0x3c, 0x16, 0xdc,
	0x85, 0x54, 0x4c, 0x23, 0xc6, 0x43, 0x77, 0xb6, 0xe3, 0xc2, 0x0c, 0xb8, 0x56, 0x4e, 0x2a, 0x85,
	0x16, 0xb8, 0x5f, 0x2a, 0x9c, 0x4a, 0xe1, 0xcc, 0x76, 0xae, 0x0c, 0x42, 0x11, 0x0a, 0xc3, 0xbb,
	0xf9, 0x57, 0x21, 0x1d, 0xdf, 0x43, 0x97, 0xf6, 0x72, 0xeb, 0x04, 0x42, 0xc6, 0xf7, 0x72, 0x39,
	0xbe, 0x8e, 0x56, 0x8c, 0xcf, 0xe7, 0x59, 0x12, 0x80, 0x1c, 0x5a, 0x23, 0x6b, 0xab, 0xe3, 0x5d,
	0x30, 0xd8, 0x33, 0x03, 0x8d, 0xef, 0xa0, 0x55, 0xe3, 0xda, 0xe3, 0xf4, 0x9f, 0x3d, 0x1f, 0x5b,
	0x68, 0x60, 0x4c, 0x8f, 0x09, 0xa7, 0x31, 0xbc, 0xc8, 0x20, 0x03, 0xfa, 0x54, 0x85, 0xd8, 0x41,
	0x7d, 0x21, 0x59, 0xc8, 0x38, 0x89, 0x7d, 0x33, 0x86, 0xaf, 0xe7, 0x29, 0x98, 0x16, 0xcb, 0xde,
	0x7a, 0x45, 0x19, 0xeb, 0xc1, 0x3c, 0x85, 0x33, 0x67, 0xb5, 0xce, 0x9c, 0x85, 0xfb, 0xa8, 0xab,
	0x8f, 0x7c, 0x46, 0x87, 0xed, 0x91, 0xb5, 0xb5, 0xe2, 0x75, 0xf4, 0xd1, 0x3e, 0xc5, 0x97, 0x51,
	0x2f, 0x51, 0x61, 0x8e, 0x76, 0x0c, 0xda, 0x4d, 0x54, 0xb8, 0x4f, 0xb1, 0x68, 0x1c, 0x4f, 0xb4,
	0x96, 0x2c, 0xc8, 0x34, 0xa8, 0x61, 0x77, 0xd4, 0xde, 0x5a, 0x99, 0x3c, 0xfc, 0xfa, 0xed, 0xda,
	0x83, 0x90, 0xe9, 0x28, 0x0b, 0x9c, 0xa9, 0x48, 0x5c, 0x0d, 0x9c, 0x82, 0x4c, 0x18, 0xd7, 0xcd,
	0x4f, 0x12, 0x4c, 0x99, 0x9b, 0x87, 0x56, 0x8e, 0x89, 0xb9, 0x5b, 0xb5, 0xf1, 0x70, 0xd5, 0xba,
	0x86, 0x14, 0x1e, 0xa0, 0x2e, 0x48, 0x29, 0xe4, 0xb0, 0x67, 0x26, 0x2c, 0x8a, 0xf1, 0x27, 0x0b,
	0xf5, 0x8d, 0xf9, 0x65, 0x4c, 0x54, 0x74, 0x10, 0x49, 0x50, 0x91, 0x88, 0x29, 0xde, 0x46, 0x03,
	0x95, 0x23, 0x40, 0xfd, 0x99, 0xd0, 0x8c, 0x87, 0x7e, 0x2a, 0xde, 0x96, 0x7f, 0xb8, 0xed, 0xe1,
	0x92, 0x3b, 0x34, 0xd4, 0xf3, 0x9c, 0xc1, 0xb7, 0x10, 0xd6, 0x42, 0x93, 0xf8, 0x77, 0x7d, 0xcb,
	0xe8, 0xd7, 0x0c, 0xd3, 0x54, 0xdf, 0x46, 0xb8, 0xee, 0x4f, 0x62, 0x46, 0x89, 0x16, 0x52, 0x0d,
	0xdb, 0xf9, 0xf4, 0xde, 0x7a, 0xd5, 0xbd, 0x26, 0xc6, 0xef, 0xad, 0x72, 0x8b, 0xaf, 0x25, 0x49,
	0x53, 0xa0, 0x8f, 0x20, 0x86, 0x90, 0x68, 0xc0, 0x37, 0xd1, 0x7a, 0xed, 0xf7, 0x09, 0xa5, 0x12,
	0x94, 0x2a, 0x77, 0xb8, 0x56, 0x13, 0xbb, 0x05, 0x8e, 0x37, 0x50, 0x8f, 0x24, 0x22, 0xe3, 0xba,
	0x5c, 0x5e, 0x59, 0xe5, 0xbf, 0x86, 0x02, 0x17, 0x89, 0xd9, 0xdb, 0xb2, 0x57, 0x14, 0xf8, 0x06,
	0xba, 0x58, 0x2c, 0x3c, 0x10, 0x19, 0xa7, 0x44, 0xce, 0xcd, 0x02, 0x3b, 0xde, 0xaa, 0x41, 0x27,
	0x25, 0x38, 0xfe, 0x60, 0xa1, 0x8d, 0x66, 0xb4, 0x57, 0x9c, 0xfe, 0x3f, 0xe1, 0x7e, 0x58, 0x68,
	0xb3, 0x19, 0xce, 0xdc, 0x37, 0x0f, 0xea, 0x84, 0xf7, 0xd1, 0x50, 0x89, 0x4c, 0x4e, 0xc1, 0x3f,
	0x2f, 0xe8, 0x46, 0xc1, 0x1f, 0xfe, 0x19, 0x77, 0x82, 0xae, 0x52, 0x50, 0x9a, 0x71, 0xa2, 0x99,
	0xe0, 0x0b, 0xec, 0x2d, 0x63, 0xdf, 0x6c, 0x88, 0x0e, 0xcf, 0x1f, 0xb9, 0xbd, 0x78, 0xe4, 0xce,
	0xdf, 0x47, 0xee, 0x2e, 0x18, 0x79, 0xf2, 0xe4, 0xf3, 0x89, 0x6d, 0x1d, 0x9f, 0xd8, 0xd6, 0xf7,
	0x13, 0xdb, 0x7a, 0x77, 0x6a, 0x2f, 0x1d, 0x9f, 0xda, 0x4b, 0x5f, 0x4e, 0xed, 0xa5, 0x37, 0xdb,
	0x8d, 0x1b, 0x55, 0x3e, 0x55, 0xd3, 0x88, 0x30, 0x5e, 0x15, 0xee, 0xd1, 0xaf, 0xb7, 0xcd, 0x5c,
	0xab, 0xa0, 0x67, 0x5e, 0xab, 0xbb, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x31, 0xab, 0x9e, 0x08,
	0xfc, 0x04, 0x00, 0x00,
}

func (m *EventBeginEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBeginEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBeginEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventEndEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEndEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEndEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventHandleQueuedMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHandleQueuedMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventHandleQueuedMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OriginalAttributes) > 0 {
		for iNdEx := len(m.OriginalAttributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.OriginalAttributes[iNdEx].Size()
				i -= size
				if _, err := m.OriginalAttributes[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OriginalEventType) > 0 {
		i -= len(m.OriginalEventType)
		copy(dAtA[i:], m.OriginalEventType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OriginalEventType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSlashThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSlashThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSlashThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashedValidators) > 0 {
		for iNdEx := len(m.SlashedValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SlashedValidators[iNdEx])
			copy(dAtA[i:], m.SlashedValidators[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.SlashedValidators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalVotingPower != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TotalVotingPower))
		i--
		dAtA[i] = 0x10
	}
	if m.SlashedVotingPower != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SlashedVotingPower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventWrappedDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWrappedDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWrappedDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochBoundary != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochBoundary))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWrappedUndelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWrappedUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWrappedUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochBoundary != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochBoundary))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWrappedBeginRedelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWrappedBeginRedelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWrappedBeginRedelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochBoundary != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochBoundary))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DestinationValidatorAddress) > 0 {
		i -= len(m.DestinationValidatorAddress)
		copy(dAtA[i:], m.DestinationValidatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceValidatorAddress) > 0 {
		i -= len(m.SourceValidatorAddress)
		copy(dAtA[i:], m.SourceValidatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventBeginEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEvents(uint64(m.EpochNumber))
	}
	return n
}

func (m *EventEndEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEvents(uint64(m.EpochNumber))
	}
	return n
}

func (m *EventHandleQueuedMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginalEventType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovEvents(uint64(m.EpochNumber))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.OriginalAttributes) > 0 {
		for _, e := range m.OriginalAttributes {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSlashThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashedVotingPower != 0 {
		n += 1 + sovEvents(uint64(m.SlashedVotingPower))
	}
	if m.TotalVotingPower != 0 {
		n += 1 + sovEvents(uint64(m.TotalVotingPower))
	}
	if len(m.SlashedValidators) > 0 {
		for _, b := range m.SlashedValidators {
			l = len(b)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventWrappedDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EpochBoundary != 0 {
		n += 1 + sovEvents(uint64(m.EpochBoundary))
	}
	return n
}

func (m *EventWrappedUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EpochBoundary != 0 {
		n += 1 + sovEvents(uint64(m.EpochBoundary))
	}
	return n
}

func (m *EventWrappedBeginRedelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EpochBoundary != 0 {
		n += 1 + sovEvents(uint64(m.EpochBoundary))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventBeginEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBeginEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBeginEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEndEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEndEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEndEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventHandleQueuedMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventHandleQueuedMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventHandleQueuedMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalEventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalEventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = append(m.TxId[:0], dAtA[iNdEx:postIndex]...)
			if m.TxId == nil {
				m.TxId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = append(m.MsgId[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgId == nil {
				m.MsgId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAttributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_tendermint_tendermint_abci_types.EventAttribute
			m.OriginalAttributes = append(m.OriginalAttributes, v)
			if err := m.OriginalAttributes[len(m.OriginalAttributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSlashThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSlashThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSlashThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedVotingPower", wireType)
			}
			m.SlashedVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			m.TotalVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedValidators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashedValidators = append(m.SlashedValidators, make([]byte, postIndex-iNdEx))
			copy(m.SlashedValidators[len(m.SlashedValidators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWrappedDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWrappedDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWrappedDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBoundary", wireType)
			}
			m.EpochBoundary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochBoundary |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWrappedUndelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWrappedUndelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWrappedUndelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBoundary", wireType)
			}
			m.EpochBoundary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochBoundary |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWrappedBeginRedelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWrappedBeginRedelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWrappedBeginRedelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBoundary", wireType)
			}
			m.EpochBoundary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochBoundary |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
